# -*- coding: utf-8 -*-
"""RagaRecogFeatures.ipynb

Automatically generated by Colaboratory.

"""

from google.colab import drive
drive.mount('/content/gdrive')

from secrets import API_KEY
import pandas as pd
import youtube_dl
import requests
import os

url = 'https://www.googleapis.com/youtube/v3/search'

folderpath = '/gdrive/MyDrive/audio'
url_file = 'youtubeurls.csv'

def list_ragas():
    ragas = []

    ragas.append("Kapi ragam")
    ragas.append("Mayamalavagowla")
    ragas.append("Harikambhoji")
    ragas.append("Kharaharapriya")
    ragas.append("Nattai ragam")
    ragas.append("Bilahari ragam")
    ragas.append("Charukesi")
    ragas.append("Abheri ragam")
    ragas.append("Kamas ragam")
    ragas.append("Behag")

    return ragas

def parse_response(results, ragam, data):
    for item in data["items"]:
        ragam_mod = ragam
        if ragam.endswith("ragam"):
            ragam_mod = ragam[:-6]

        record = {'ragam': ragam_mod,
                  'video_id': item["id"]["videoId"], 
                  'title': item["snippet"]["title"], 
                  'desc': item["snippet"]["description"]}
        results.append(record)

    return results

def call_youtube():
    results = []
    ragas = list_ragas()

    for raga in ragas:
        params = {
            "part": "snippet",
            "maxResults": 10,
            "q": raga,
            "type": "video",
            "key": API_KEY
        }
    
        response = requests.get(url, params)

        if not response.status_code == 200:
            print(response)
        else:
            results = parse_response(results, raga, response.json())
    
    if len(results) > 0:
        df = pd.DataFrame(results)
        df.to_csv('youtubeurls.csv', index = False)

call_youtube()

def my_hook(d):
    if d['status'] == 'finished':
        print('Done downloading, now converting ...')

def load_urls():
    df = pd.read_csv(url_file)
    return [{'ragam': ragam, 'url': f"https://www.youtube.com/watch?v={vid}"} for ragam, vid in zip(df['ragam'], df['video_id'])]

def get_audio_files():
    urls = load_urls()

    count = 1
    ragam = ""

    for url in urls:
        if not url["ragam"] == ragam:
            count = 1
            ragam = url["ragam"]

        ydl_opts = {
            'format': 'bestaudio/best',
            'postprocessors': [{
                'key': 'FFmpegExtractAudio',
                'preferredcodec': 'mp3',
                'preferredquality': '192',
            }],
        }

        filename = str(count) + url["ragam"] + "."
        ydl_opts.update({'outtmpl':filename})

        with youtube_dl.YoutubeDL(ydl_opts) as ydl:
            ydl.download([url["url"]])

        count = count + 1

get_audio_files()

pip install pydub

import pydub
import shutil
from pydub import AudioSegment

chunk_size = 45000 #millisecs
ragas = ['Kapi', 
         'Mayamalavagowla', 
         'Harikambhoji', 
         'Kharaharapriya', 
         'Nattai', 
         'Bilahari',
         'Charukesi',
         'Abheri',
         'Kamas',
         'Behag']

def list_of_files():
  flst = []

  for ragam in ragas:
    for i in range(1, 11):
      filename = str(i) + ragam + ".mp3"
      flst.append(filename)
  
  return flst

def split_audio_files():
  for i, ragam in enumerate(ragas):
    file_number = 0
    for file in list_of_files():
        if ragam in file:
          print("exporting " + file)
          audio = AudioSegment.from_file(file, format="mp3")
          for j, chunk in enumerate(pydub.utils.make_chunks(audio, chunk_size)):
            file_number = file_number + 1
            filename = ragam + "-" + str(file_number) + ".mp3"
            chunk.export(filename, format="mp3")
            src = os.getcwd() + "/" + filename
            tgt = os.getcwd() + folderpath + "/" + filename
            shutil.copy(src, tgt)
            os.remove(src)

split_audio_files()